#include<bits/stdc++.h> 
using namespace std; 
class BTN 
{ 
    int *values;  
    int t; 
    BTN **C; 
    int n;
    bool leaf;  
public: 
    BTN(int _t, bool _leaf); 
    void INF(int k); 
    void split(int i, BTN *y); 
    void traverse(); 
    BTN *search(int k);   
 
friend class BT; 
}; 
class BT 
{ 
    BTN *root;  
    int t; 
public: 
    BT(int _t) 
    {  root = NULL;  t = _t; } 
 
    void traverse() 
    {  if (root != NULL) root->traverse(); } 
 
    BTN* search(int k) 
    {  return (root == NULL)? NULL : root->search(k); } 
    void insert(int k); 
};
BTN::BTN(int t1, bool leaf1) 
{ 
    t = t1; 
    leaf = leaf1; 
    values = new int[2*t-1]; 
    C = new BTN *[2*t]; 
    n = 0; 
} 
  
void BTN::traverse() 
{ 
    int i; 
    for (i = 0; i < n; i++) 
    { 
        if (leaf == false) 
            C[i]->traverse(); 
        cout << " " << values[i]; 
    } 
    if (leaf == false) 
        C[i]->traverse(); 
} 

BTN *BTN::search(int k) 
{ 
    int i = 0; 
    while (i < n && k > values[i]) 
        i++; 
    if (values[i] == k) 
        return this; 
    if (leaf == true) 
        return NULL; 
    return C[i]->search(k); 
} 
 
void BT::insert(int k) 
{ 
    if (root == NULL) 
    { 
        root = new BTN(t, true); 
        root->values[0] = k;  
        root->n = 1;  
    } 
    else 
    { 
        if (root->n == 2*t-1) 
        { 
            BTN *s = new BTN(t, false); 
   
            s->C[0] = root; 
            s->split(0, root); 
            int i = 0; 
            if (s->values[0] < k) 
                i++; 
            s->C[i]->INF(k);  
            root = s; 
        } 
        else  
            root->INF(k); 
    } 
} 
void BTN::INF(int k) 
{ 
    int i = n-1; 
    if (leaf == true) 
    { 
        while (i >= 0 && values[i] > k) 
        { 
            values[i+1] = values[i]; 
            i--; 
        } 
        values[i+1] = k; 
        n = n+1; 
    } 
    else  
    { 
        while (i >= 0 && values[i] > k) 
            i--; 
  
        if (C[i+1]->n == 2*t-1) 
        { 
            split(i+1, C[i+1]); 
            if (values[i+1] < k) 
                i++; 
        } 
        C[i+1]->INF(k); 
    } 
} 
  
void BTN::split(int i, BTN *y) 
{ 
    BTN *z = new BTN(y->t, y->leaf); 
    z->n = t - 1; 
  
    for (int j = 0; j < t-1; j++) 
        z->values[j] = y->values[j+t]; 
  
    if (y->leaf == false) 
    { 
        for (int j = 0; j < t; j++) 
            z->C[j] = y->C[j+t]; 
    } 
  
    y->n = t - 1; 
  
    for (int j = n; j >= i+1; j--) 
        C[j+1] = C[j]; 
  
    C[i+1] = z; 
  
     for (int j = n-1; j >= i; j--) 
        values[j+1] = values[j]; 
    values[i] = y->values[t-1]; 
    n = n + 1; 
} 
  
int main() 
{ 
    BT t(3); 
    t.insert(1); 
    t.insert(2); 
    t.insert(3);
    cout << "Traversal of the constucted tree is "; 
    t.traverse(); 
  
    int k = 6; 
    (t.search(k) != NULL)? cout << "\nYES" : cout << "\nNO"; 
  
    k = 15; 
    (t.search(k) != NULL)? cout << "\nYES" : cout << "\nNO"; 
  
    return 0; 
} 
